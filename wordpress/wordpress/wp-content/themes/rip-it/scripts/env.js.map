{"version":3,"sources":["webpack:///env.js","webpack:///./src/scripts/env.js","webpack:///./src/scripts/utils/eventful.js"],"names":["webpackJsonp","module","exports","__webpack_require__","Eventful","eventful","_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","this","_events","value","type","test","cb","hasOwnProperty","validateEventType","validateEventCallback","eventTypeExists","unshift","_this","index","arguments","undefined","indexOf","setTimeout","splice","_this2","data","ev_type","forEach","call"],"mappings":"AAAAA,cAAc,IAER,SAAUC,EAAQC,EAASC,GAEjC,YCJA,IAAIC,GAAWD,EAAQ,EAEvBF,GAAOC,SACLG,SAAY,GAAID,KDYZ,SAAUH,EAAQC,EAASC,GAEjC,YAOA,SAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAJhH,GAAIC,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,eAAkBF,IAElQG,EAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUd,EAAaqB,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBT,EAAYO,UAAWc,GAAiBC,GAAab,EAAiBT,EAAasB,GAAqBtB,MEtB1hBJ,EF0BS,WElBb,QAAAA,KAAcE,EAAAyB,KAAA3B,GACZ2B,KAAKC,WFsMP,MA7JAhB,GAAaZ,IACXwB,IAAK,oBACLK,MAAO,SEhCSC,GAChB,IAAmC,IAA/B,eAAgBC,KAAKD,GACvB,KAAM,oDF8CRN,IAAK,wBACLK,MAAO,SEnCaG,GACpB,GAAkB,kBAARA,GACR,KAAM,yCFiDRR,IAAK,kBACLK,MAAO,SEtCOC,GACd,MAAOH,MAAKC,QAAQK,eAAeH,MFoDnCN,IAAK,KACLK,MAAO,SEzCNC,EAAME,GAcP,MAZAL,MAAKO,kBAAkBJ,GACvBH,KAAKQ,sBAAsBH,IAGO,IAA/BL,KAAKS,gBAAgBN,KACtBH,KAAKC,QAAQE,OAIfH,KAAKC,QAAQE,GAAMO,QAAQL,GAGpBL,QFuDPH,IAAK,MACLK,MAAO,SE5CLC,GAAe,GAAAQ,GAAAX,KACbY,QAMJ,OAHAZ,MAAKO,kBAAkBJ,IAGW,IAA/BH,KAAKS,gBAAgBN,GACfH,KAIU,IAAhBa,UAAAvB,QAAA,IAAAuB,UAAAvB,OAAA,IACDU,KAAKC,QAAQE,MACNH,OAITA,KAAKQ,sBAALK,UAAAvB,QAAA,MAAAwB,GAAAD,UAAA,IAGAD,EAAQZ,KAAKC,QAAQE,GAAMY,QAAnBF,UAAAvB,QAAA,MAAAwB,GAAAD,UAAA,KACM,IAAXD,GACDI,WAAW,WACTL,EAAKV,QAAQE,GAAMc,OAAOL,EAAO,IAChC,GAIEZ,SF4DPH,IAAK,UACLK,MAAO,SEjDDC,GAAiB,GAAAe,GAAAlB,KAAXmB,EAAWN,UAAAvB,OAAA,OAAAwB,KAAAD,UAAA,GAAAA,UAAA,KAIvB,IAFAb,KAAKO,kBAAkBJ,GAEH,gBAAjB,KAAOgB,EAAP,YAAAxC,EAAOwC,IACR,KAAM,gCAIR,QAAkC,IAA/BnB,KAAKS,gBAAgBN,GACfH,MAITmB,EAAKC,QAAUjB,EAGfH,KAAKC,QAAQE,GAAMkB,QAAQ,SAAChB,GAC1BA,EAAGiB,KAAHJ,EAAcC,KAITnB,UFyDF3B,IErDTH,GAAOC,QAAUE,KF2Dd","file":"env.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Eventful = __webpack_require__(1);\n\nmodule.exports = {\n  \"eventful\": new Eventful()\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Eventful = function () {\n\n  /*\n  ------------------------------------------\n  | constructor:void\n  |\n  | Construct.\n  ------------------------------------------ */\n  function Eventful() {\n    _classCallCheck(this, Eventful);\n\n    this._events = [];\n  }\n\n  /*\n  ------------------------------------------\n  | validateEventType:null\n  |\n  | type:string - event name\n  |\n  | Validate event type.\n  ------------------------------------------ */\n\n\n  _createClass(Eventful, [{\n    key: \"validateEventType\",\n    value: function validateEventType(type) {\n      if (/^[a-z\\-_]+$/g.test(type) === false) {\n        throw \"Error: type type must be a string (a-z, -, _)!\";\n      }\n    }\n\n    /*\n    ------------------------------------------\n    | validateEventCallback:null\n    |\n    | cb:function - callback\n    |\n    | Validate event callback.\n    ------------------------------------------ */\n\n  }, {\n    key: \"validateEventCallback\",\n    value: function validateEventCallback(cb) {\n      if (typeof cb !== \"function\") {\n        throw \"Error: callback must be a function!\";\n      }\n    }\n\n    /*\n    ------------------------------------------\n    | eventTypeExists:boolean\n    |\n    | type:string - event name\n    |\n    | Does this event type exist.\n    ------------------------------------------ */\n\n  }, {\n    key: \"eventTypeExists\",\n    value: function eventTypeExists(type) {\n      return this._events.hasOwnProperty(type);\n    }\n\n    /*\n    ------------------------------------------\n    | on:object\n    |\n    | type:string - event name\n    | cb:function - callback\n    |\n    | Register an event.\n    ------------------------------------------ */\n\n  }, {\n    key: \"on\",\n    value: function on(type, cb) {\n      // check type / cb\n      this.validateEventType(type);\n      this.validateEventCallback(cb);\n\n      // add type if it doesn't exist\n      if (this.eventTypeExists(type) === false) {\n        this._events[type] = [];\n      }\n\n      // register event\n      this._events[type].unshift(cb);\n\n      // return this for chainging\n      return this;\n    }\n\n    /*\n    ------------------------------------------\n    | off:object\n    |\n    | type:string - event name\n    | ...args[0]:function - callback\n    |\n    | Remove an event.\n    ------------------------------------------ */\n\n  }, {\n    key: \"off\",\n    value: function off(type) {\n      var _this = this;\n\n      var index = void 0;\n\n      // check type\n      this.validateEventType(type);\n\n      // are there any events with this type?\n      if (this.eventTypeExists(type) === false) {\n        return this;\n      }\n\n      // if no cb was specfied, remove them all\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        this._events[type] = [];\n        return this;\n      }\n\n      // check args\n      this.validateEventCallback(arguments.length <= 1 ? undefined : arguments[1]);\n\n      // are there any listeners?\n      index = this._events[type].indexOf(arguments.length <= 1 ? undefined : arguments[1]);\n      if (index !== -1) {\n        setTimeout(function () {\n          _this._events[type].splice(index, 1);\n        }, 0);\n      }\n\n      // return this for chainging\n      return this;\n    }\n\n    /*\n    ------------------------------------------\n    | trigger:object\n    |\n    | type:string - event name\n    | data:array - data to callback\n    |\n    | Trigger an event.\n    ------------------------------------------ */\n\n  }, {\n    key: \"trigger\",\n    value: function trigger(type) {\n      var _this2 = this;\n\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // check type / data\n      this.validateEventType(type);\n\n      if ((typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) !== \"object\") {\n        throw \"Error: data must be an object!\";\n      }\n\n      // are there any listeners?\n      if (this.eventTypeExists(type) === false) {\n        return this;\n      }\n\n      // pass type to callbacks\n      data.ev_type = type;\n\n      // execute callbacks\n      this._events[type].forEach(function (cb) {\n        cb.call(_this2, data);\n      });\n\n      // return this for chainging\n      return this;\n    }\n  }]);\n\n  return Eventful;\n}();\n\nmodule.exports = Eventful;\n\n/***/ })\n],[0]);\n\n\n// WEBPACK FOOTER //\n// env.js","let Eventful = require(\"./utils/eventful\");\n\nmodule.exports = {\n  \"eventful\": new Eventful()\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/scripts/env.js","class Eventful {\n\n  /*\n  ------------------------------------------\n  | constructor:void\n  |\n  | Construct.\n  ------------------------------------------ */\n  constructor() {\n    this._events = [];\n  }\n\n  /*\n  ------------------------------------------\n  | validateEventType:null\n  |\n  | type:string - event name\n  |\n  | Validate event type.\n  ------------------------------------------ */\n  validateEventType(type) {\n    if((/^[a-z\\-_]+$/g).test(type) === false) {\n      throw \"Error: type type must be a string (a-z, -, _)!\";\n    }\n  }\n\n  /*\n  ------------------------------------------\n  | validateEventCallback:null\n  |\n  | cb:function - callback\n  |\n  | Validate event callback.\n  ------------------------------------------ */\n  validateEventCallback(cb) {\n    if(typeof(cb) !== \"function\") {\n      throw \"Error: callback must be a function!\";\n    }\n  }\n\n  /*\n  ------------------------------------------\n  | eventTypeExists:boolean\n  |\n  | type:string - event name\n  |\n  | Does this event type exist.\n  ------------------------------------------ */\n  eventTypeExists(type) {\n    return this._events.hasOwnProperty(type);\n  }\n\n  /*\n  ------------------------------------------\n  | on:object\n  |\n  | type:string - event name\n  | cb:function - callback\n  |\n  | Register an event.\n  ------------------------------------------ */\n  on(type, cb) {\n    // check type / cb\n    this.validateEventType(type);\n    this.validateEventCallback(cb);\n\n    // add type if it doesn't exist\n    if(this.eventTypeExists(type) === false) {\n      this._events[type] = [];\n    }\n\n    // register event\n    this._events[type].unshift(cb);\n\n    // return this for chainging\n    return this;\n  }\n\n  /*\n  ------------------------------------------\n  | off:object\n  |\n  | type:string - event name\n  | ...args[0]:function - callback\n  |\n  | Remove an event.\n  ------------------------------------------ */\n  off(type, ...args) {\n    let index;\n\n    // check type\n    this.validateEventType(type);\n\n    // are there any events with this type?\n    if(this.eventTypeExists(type) === false) {\n      return this;\n    }\n\n    // if no cb was specfied, remove them all\n    if(args.length === 0) {\n      this._events[type] = [];\n      return this;\n    }\n\n    // check args\n    this.validateEventCallback(args[0]);\n\n    // are there any listeners?\n    index = this._events[type].indexOf(args[0]);\n    if(index !== -1) {\n      setTimeout(() => {\n        this._events[type].splice(index, 1);\n      }, 0);\n    }\n\n    // return this for chainging\n    return this;\n  }\n\n  /*\n  ------------------------------------------\n  | trigger:object\n  |\n  | type:string - event name\n  | data:array - data to callback\n  |\n  | Trigger an event.\n  ------------------------------------------ */\n  trigger(type, data = {}) {\n    // check type / data\n    this.validateEventType(type);\n\n    if(typeof(data) !== \"object\") {\n      throw \"Error: data must be an object!\";\n    }\n\n    // are there any listeners?\n    if(this.eventTypeExists(type) === false) {\n      return this;\n    }\n\n    // pass type to callbacks\n    data.ev_type = type;\n\n    // execute callbacks\n    this._events[type].forEach((cb) => {\n      cb.call(this, data);\n    });\n\n    // return this for chainging\n    return this;\n  }\n}\n\nmodule.exports = Eventful;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scripts/utils/eventful.js"],"sourceRoot":""}